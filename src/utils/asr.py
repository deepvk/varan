from dataclasses import dataclass
from typing import List, Optional, Tuple

import torch
from transformers.utils import ModelOutput


@dataclass
class ASRVaranOutput(ModelOutput):
    """
    Base class for SSL output with VARAN.

    Args:
        loss (`torch.FloatTensor` of shape `(1,)`, Total loss (CTC + (kl * beta)).
        ctc_loss (`torch.FloatTensor` of shape `(1,)`, CTC loss.
        kl_loss (`torch.FloatTensor` of shape `(1,)`, KL-divergence between distributions.
        logits (`list(torch.FloatTensor`) of shape `(batch_size, sequence_length, config.vocab_size)`):
            Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
            The size of the list is the number of the n_layers used to generate predictions.
        layer_distribution_logits (`torch.FloatTensor`) of shape `(batch_size, n_layers)`):
            Logits generated by Posterior distribution predictor. Used to compute weights and weight hiddens.
        hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
            is passed or when `config.output_hidden_states=True`):
            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +
            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.

    """

    loss: Optional[torch.FloatTensor] = None
    ctc_loss: Optional[torch.FloatTensor] = None
    kl_loss: Optional[torch.FloatTensor] = None
    logits: Optional[List[torch.FloatTensor]] = None
    layer_distribution_logits: Optional[torch.FloatTensor] = None
    hidden_states: Optional[Tuple[torch.FloatTensor, ...]] = None
    input_lengths: Optional[torch.FloatTensor] = None
